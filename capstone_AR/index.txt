<!DOCTYPE html>
<html lang="en">
	<head>
		<title>FLOWESPACE-AR</title>
		<style>
			body { margin: 0; }
		</style>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
		<link type="text/css" rel="stylesheet" href="main.css">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
		<!-- <script src="build/three.js"></script> -->
		<!--AR.js-->
		<script src="https://cdn.jsdelivr.net/gh/aframevr/aframe@1c2407b26c61958baa93967b5412487cd94b290b/dist/aframe-master.min.js"></script>
		<script src="https://raw.githack.com/AR-js-org/AR.js/3.3.3/aframe/build/aframe-ar-nft.js"></script>  <!-- THREEx-->
	</head>
	<body>

		<!-- START Menu-bar -->
		<div id="content">
			<div id="mySidenav" class="sidenav">
				<div id="flower-list">
					<a href="javascript:void(0)" class="closebtn" onclick="closeNav()">PLANTS&nbsp;&nbsp;&nbsp;&nbsp;&times;</a>
				</div>
				<div>
					<a class="plant-obj" id="1" href="#">plant_1</a>
					<a class="plant-obj" id="2" href="#">plant_2</a>
					<a class="plant-obj" id="3" href="#">plant_3</a>
					<a class="plant-obj" id="4" href="#">plant_4</a>
				</div>
			</div>
			<div id="container" style="position: fixed;"></div>

			<span style="font-size:30px;cursor:pointer;position: absolute;" onclick="openNav()">&#9776; open</span>
	
			<button type="button" id="place-button">PLACE</button>
			
		</div>

		<script>
			function openNav() {
			  document.getElementById("mySidenav").style.width = "250px";
			}
			
			function closeNav() {
			  document.getElementById("mySidenav").style.width = "0";
			}
		</script>
		<!-- END Menu-bar -->


		<script type="module">

			import * as THREE from './build/three.module.js';
			import { ARButton } from './jsm/webxr/ARButton.js';  // customizing ARButton
			
			import { OrbitControls } from './jsm/controls/OrbitControls.js';
			import { GLTFLoader } from './jsm/loaders/GLTFLoader.js';
			import { RGBELoader } from './jsm/loaders/RGBELoader.js';
			import { RoughnessMipmapper } from './jsm/utils/RoughnessMipmapper.js';

			// 필요한 변수들
			var container;
			var camera, scene, renderer;
			var arToolkitSource;  // WEBCAM
			var controller;  // CONTROLS

			var reticle, pmremGenerator, current_object, controls;
			var envmap, isAR;

			var hitTestSource = null;
			var hitTestSourceRequested = false;

			init();
			animate();

			/* 꽃 사진 선택하면 띄워줘야 함 -> 수정 필요 */
			$(".plant-obj").click(function(){
				if(current_object != null){
					scene.remove(current_object);
				}

				loadModel($(this).attr("id"));
			});

			$("#ARButton").click(function(){

				current_object.visible = false;
				isAR = true;
			});

			/* 꽃 사진 place 하는 버튼 -> 수정 필요
			// place plant button
			$("#place-button").click(function(){
				arPlace();
			});

			function arPlace(){
				if ( reticle.visible ) {

					current_object.position.setFromMatrixPosition(reticle.matrix);
					current_object.visible = true;
				}
			}
			*/

			function init() {

				container = document.createElement( 'div' );
				document.getElementById("container").appendChild( container );

				scene = new THREE.Scene();
				window.scene = scene;

				// cemara 추가!
				// camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.001, 200 );
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
				scene.add( camera );

				/* change the light setting */
				var directionalLight = new THREE.DirectionalLight(0xdddddd, 1);
				directionalLight.position.set(0, 0, 1).normalize();
				scene.add(directionalLight);

				var ambientLight = new THREE.AmbientLight(0x222222);
				scene.add(ambientLight);
				

				renderer = new THREE.WebGLRenderer({ 
					antialias: true,
					alpha: true 
				});

				// WebGLRenderer 설정
				renderer.setClearColor(new THREE.Color('lightgrey'), 0)
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.xr.enabled = true;   //####################
				// renderer.shadowMap.enabled = true;
				container.appendChild( renderer.domElement );
				document.body.appendChild( renderer.domElement );

				/* */
				pmremGenerator = new THREE.PMREMGenerator(renderer);
				pmremGenerator.compileEquirectangularShader();

				controls = new OrbitControls(camera, renderer.domElement);
				controls.addEventListener('change', render);
				controls.minDistance = 2;
				controls.maxDistance = 10;
				controls.target.set(0, 0, -0.2);
				controls.enableDamping = true;
				controls.dampingFactor = 0.05;

				// AR SETUP
				let options = {
					requiredFeatures: ['hit-test'],
					optionalFeatures: ['dom-overlay'],
				}

				options.domOverlay = { root: document.getElementById('content')};

				document.body.appendChild( ARButton.createButton(renderer, camera, options));

				// var geometry = new THREE.CyilnderBufferGeometry(0.1, 0.1, 0.2, 32).translate(0, 0.1, 0);  // CYLINDER 

				/* */
				reticle = new THREE.Mesh(
					new THREE.RingBufferGeometry( 0.15, 0.2, 32 ).rotateX( - Math.PI / 2 ),
					new THREE.MeshBasicMaterial()
				);
				reticle.matrixAutoUpdate = false;
				reticle.visible = false;
				scene.add( reticle );
				/* */

				// 3D 객체 click, rotate 하면 불리는 이벤트 등록
				// 꽃간에서는 rotate 는 필요 없을 것 같고, 꽃을 움직일 수 있는 것만 만들면 될 듯\
				/* */
				var touchDown, touchX, touchY, deltaX, deltaY;

				renderer.domElement.addEventListener('touchstart', function(e){
					e.preventDefault();
					touchDown=true;
					touchX = e.touches[0].pageX;
					touchY = e.touches[0].pageY;
				}, false);

				renderer.domElement.addEventListener('touchend', function(e){
					e.preventDefault();
					touchDown = false;
				}, false);

				renderer.domElement.addEventListener('touchmove', function(e){
					e.preventDefault();
					
					if(!touchDown){
						return;
					}

					deltaX = e.touches[0].pageX - touchX;
					deltaY = e.touches[0].pageY - touchY;
					touchX = e.touches[0].pageX;
					touchY = e.touches[0].pageY;

					rotateObject();

				}, false);
				/* */

			}  // finish init()


			/* 3D 객체 rotate */
			function rotateObject(){
				if(current_object && reticle.visible){
					current_object.rotation.y += deltaX / 100;
				}
			}
			

			/* */
			function animate() {
				renderer.setAnimationLoop( render );
				requestAnimationFrame(animate);
				controls.update();
			}
			
			/*  3D glb 불러와서 띄워주는 함수 
			-> 꽃간에서는 이미지 띄워주는 함수로 수정 필요 */
			function loadModel(model){
				
				new RGBELoader()
					.setDataType(THREE.UnsignedByteType)
					.setPath('./textures/')
					.load('photo_studio_01_1k.hdr', function(texture){

						envmap = pmremGenerator.fromEquirectangular(texture).texture;

						scene.environment = envmap;
						texture.dispose();
						pmremGenerator.dispose();
						render();

						var loader = new GLTFLoader().setPath('./3d/');
						loader.load(model + ".glb", function(glb) {

							current_object = glb.scene;
							scene.add(current_object);

							// call the arPlace function when the object is loaded too.
							// arPlace();

							var box = new THREE.Box3();
							box.setFromObject(current_object);
							box.getCenter(controls.target);

							controls.update();
							render();
						});
					});
			}

			/* frame is a Web XR API frame property */
			function render( timestamp, frame ) {

				if ( frame && isAR ) {

					var referenceSpace = renderer.xr.getReferenceSpace();
					var session = renderer.xr.getSession();  // ARButton 에서 setSession 하면 hall_empty.glb 로드됨

					if ( hitTestSourceRequested === false ) {

						session.requestReferenceSpace( 'viewer' ).then( function ( referenceSpace ) {

							session.requestHitTestSource( { space: referenceSpace } ).then( function ( source ) {
								hitTestSource = source;
							} );

						} );

						session.addEventListener( 'end', function () {

							hitTestSourceRequested = false;
							hitTestSource = null;

							isAR = false;

							reticle.visible = false;

							var box = new THREE.Box3();
							box.setFromObject(current_object);
							box.getCenter(controls.target);

							document.getElementById("place-button").style.display = "none";

						} );

						hitTestSourceRequested = true;

					}

					if ( hitTestSource ) {

						var hitTestResults = frame.getHitTestResults( hitTestSource );

						if ( hitTestResults.length ) {

							var hit = hitTestResults[0];

							document.getElementById("place-button").style.display = "block";

							reticle.visible = true;
							reticle.matrix.fromArray( hit.getPose( referenceSpace ).transform.matrix );

						} else {

							reticle.visible = false;

							document.getElementById("place-button").style.display = "none";

						}

					}

				}

				renderer.render( scene, camera );
			}
			

			// renderer.render( scene, camera );
		</script>
	</body>
</html>
